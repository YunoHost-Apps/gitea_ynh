#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..."

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path)
admin=$(ynh_app_setting_get --app=$app --key=adminusername)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
key=$(ynh_app_setting_get --app=$app --key=secret_key)
lfs_key=$(ynh_app_setting_get --app=$app --key=lfs_key)
port=$(ynh_app_setting_get --app=$app --key=web_port)
upstream_version=$(ynh_app_setting_get --app=$app --key=upstream_version)
db_name=$(ynh_app_setting_get --app=$app --key=db_name)
db_user=$db_name
db_pwd=$(ynh_app_setting_get --app=$app --key=mysqlpwd)
datadir=$(ynh_app_setting_get --app=$app --key=datadir)

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..." --weight=5

if [ "0$(ynh_app_setting_get --app=$app --key=disable_backup_before_upgrade)" -ne 1 ]
then
    ynh_backup_before_upgrade
    ynh_clean_setup () {
        # Clean installation remainings that are not handled by the remove script.
        ynh_clean_check_starting
        ynh_restore_upgradebackup
    }
fi

# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Stopping a systemd service..." --weight=1

# We stop the service before to set ynh_clean_setup
ynh_systemd_action --service_name=$app --action="stop" --log_path="/var/log/$app/gitea.log"

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..." --weight=1

# If db_name doesn't exist, create it
if [ -z "$db_name" ]; then
   db_name=$(ynh_sanitize_dbid --db_name=$app)
   ynh_app_setting_set --app=$app --key=db_name --value=$db_name
fi

# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
   final_path=/opt/$app
   ynh_app_setting_set --app=$app --key=final_path --value=$final_path
fi

# If lfs_key doesn't exist, create it
if [ -z "$lfs_key" ]; then
   lfs_key=$(ynh_string_random)
   ynh_app_setting_set --app=$app --key=lfs_key --value=$lfs_key
fi

# Cleaning legacy permissions
if ynh_legacy_permissions_exists; then
    ynh_legacy_permissions_delete_all

    ynh_app_setting_delete --app=$app --key=is_public
fi

if ! ynh_permission_exists --permission="admin"; then
    # Create the required permissions
    ynh_permission_create --permission="admin" --allowed=$admin
fi

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..." --weight=1

ynh_system_user_create --username=$app --home_dir=$final_path --use_shell
# Add ssh permission for gitea user
adduser $app ssh.app

#=================================================
# MIGRATION FROM GOGS
#=================================================

[[ $YNH_APP_ID == "gogs" ]] \
    && [[ "$(cat "/opt/$app/templates/.VERSION")" != 0.11.79.1211 ]] \
    && ynh_die --message "It look like that you have an old Gogs install. You need first upgrade Gogs instance (id: $gogs_migrate_id) and after migrate to Gitea."
ynh_handle_app_migration --migration_id=gogs --migration_list=gogs_migrations

if [[ $migration_process -eq 1 ]]; then
    # Reload variables
    #db_name=$(ynh_sanitize_dbid --db_name=$app)
    #db_user=$db_name
    #final_path="/opt/$app"
    #datadir="/home/$app"
    #repos_path="$datadir/repositories"
    #data_path="$datadir/data"

    # Replace the user
    ynh_system_user_delete $old_app
    test getent passwd "$app" &>/dev/null || \
        useradd -d "$datadir" --system --user-group "$app" --shell /bin/bash || \
            ynh_die --message "Unable to create $app system account"

    # Clean old binary
    ynh_secure_remove --file=$final_path/gogs
    ynh_secure_remove --file=$final_path/custom/conf/auth.d

    # Restore authentication from SQL database
    #ynh_replace_string --match_string __APP__ --replace_string "$app" --target_file ../conf/login_source.sql
    #ynh_mysql_connect_as "$db_user" "$db_pwd" "$db_name" < ../conf/login_source.sql
    pushd "$final_path"
        ynh_exec_as $app ./gitea admin auth add-ldap --security-protocol "Unencrypted" --name "YunoHost LDAP" --host "localhost" --port "389" --skip-tls-verify --user-search-base "ou=users,dc=yunohost,dc=org" --user-filter "(&(uid=%s)(objectClass=posixAccount)(permission=cn=$app.main,ou=permission,dc=yunohost,dc=org))" --firstname-attribute "givenName" --surname-attribute "sn" --email-attribute "mail" --admin-filter "(permission=cn=$app.admin,ou=permission,dc=yunohost,dc=org)"
    popd

    # Fix hooks
    if [[ -e $repos_path ]];then
        ls $repos_path/*/*.git/hooks/pre-receive | while read p; do
            ynh_secure_remove --file=$p
        done
        ls $repos_path/*/*.git/hooks/post-receive | while read p; do
            ynh_secure_remove --file=$p
        done
    fi

    upstream_version="0.0.1"
fi

# Move data directory
if [ -e "/home/$app" ] && [ ! -e $datadir ]; then
    mv "/home/$app" "$datadir"
fi

#=================================================
# DATA BASE MIGRATION
#=================================================
ynh_script_progression --message="Upgrading database and sources..." --weight=6

# Before the version 1.7 the upstream version was not stored
# The way to find the version for the install < 1.7 is to parse the binary file to find which version is installed
if [ -z ${upstream_version:-} ]; then
    for version in "0.0." "1.0." "1.1." "1.2." "1.3." "1.4." "1.5." "1.6." "1.7."; do
        if strings $final_path/gitea | grep -P "^${version//./\\.}\d"; then
            upstream_version="${version}0"
            break
        fi
    done
fi

restart_gitea() {

    ynh_systemd_action --service_name=$app --action="start" --log_path="/var/log/$app/gitea.log" --line_match="Starting new Web server: tcp:127.0.0.1:"
    # Leave the time to update the database schema
    sleep 5
    systemctl stop $app
}

case $upstream_version in
"0.0."* )
    ynh_setup_source $final_path source/${architecture}_1.0
    set_permission
    systemctl start $app
    sleep 20
    systemctl stop $app
;&
"1.0."* )
    ynh_setup_source $final_path source/${architecture}_1.1
    restart_gitea
;&
"1.1."* )
    ynh_setup_source $final_path source/${architecture}_1.2
    restart_gitea
;&
"1.2."* )
    ynh_setup_source $final_path source/${architecture}_1.3
    restart_gitea
;&
"1.3."* )
    ynh_setup_source $final_path source/${architecture}_1.4
    restart_gitea
;&
"1.4."* )
    ynh_setup_source $final_path source/${architecture}_1.5
    restart_gitea
;&
"1.5."* )
    ynh_setup_source $final_path source/${architecture}_1.6
    restart_gitea
;&
"1.6."* )
    ynh_setup_source $final_path source/${architecture}_1.7
    restart_gitea
;&
"1.7."* )
    ynh_setup_source $final_path source/${architecture}_1.8
    restart_gitea
;&
"1.8."* )
    ynh_setup_source $final_path source/${architecture}_1.9
    restart_gitea
;&
"1.9."* )
    ynh_setup_source $final_path source/${architecture}_1.10
    restart_gitea
;&
"1.10."* )
    ynh_setup_source $final_path source/${architecture}_1.11
    restart_gitea
;&
"1.11."* )
    ynh_setup_source $final_path source/${architecture}_1.12
    restart_gitea
;&
"1.12."* )
    ynh_setup_source $final_path source/${architecture}_1.13
    restart_gitea
;&
"1.13."* )
    ynh_setup_source $final_path source/${architecture}_1.14
    restart_gitea
;&
"1.14."* )
    ynh_setup_source $final_path source/${architecture}_1.15
    restart_gitea
;&
esac

# Install Gitea source
ynh_setup_source --dest_dir="$final_path" --source_id="../conf/source/$architecture"

# Save Version
ynh_app_setting_set --app=$app --key=upstream_version --value=$(ynh_app_upstream_version)

chmod 750 "$final_path"
chmod -R o-rwx "$final_path"
chown -R $app:www-data "$final_path"
chmod +x "$final_path/gitea"

#=================================================
# ADD A CONFIGURATION
#=================================================
ynh_script_progression --message="Adding a configuration file..." --weight=1

ssh_port=$(grep -P "Port\s+\d+" /etc/ssh/sshd_config | grep -P -o "\d+")
ynh_add_config --template="../conf/app.ini" --destination="$final_path/custom/conf/app.ini"

chmod 640 "$final_path/custom/conf/app.ini"
chown $app:$app "$final_path/custom/conf/app.ini"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading NGINX web server configuration..." --weight=2

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Upgrading systemd configuration..." --weight=2

# Create a dedicated systemd config
ynh_add_systemd_config

#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Upgrading logrotate configuration..." --weight=1

# Use logrotate to manage app-specific logfile(s)
ynh_use_logrotate --non-append

#=================================================
# GENERIC FINALIZATION
#=================================================

# # Set all permissions
# ynh_script_progression --message="Update permission..."

# if ! ynh_permission_exists --permission admin; then
#     ynh_app_setting_delete --app=$app --key=unprotected_uris
#     ynh_permission_create --permission='admin' --allowed="$admin"
#     # Update LDAP config
#     #ynh_replace_string --match_string "__APP__" --replace_string "$app" --target_file ../conf/login_source.sql
#     #ynh_mysql_connect_as "$db_user" "$db_pwd" "$db_name" < ../conf/login_source.sql
#     pushd "$final_path"
#         ynh_exec_as $app ./gitea admin auth add-ldap --security-protocol "Unencrypted" --name "YunoHost LDAP" --host "localhost" --port "389" --skip-tls-verify --user-search-base "ou=users,dc=yunohost,dc=org" --user-filter "(&(uid=%s)(objectClass=posixAccount)(permission=cn=$app.main,ou=permission,dc=yunohost,dc=org))" --firstname-attribute "givenName" --surname-attribute "sn" --email-attribute "mail" --admin-filter "(permission=cn=$app.admin,ou=permission,dc=yunohost,dc=org)"
#     popd
# fi

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..." --weight=1

yunohost service add $app --description="Lightweight Git forge" --log="/var/log/$app/gitea.log"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --weight=1

ynh_systemd_action --service_name=$app --action="start" --log_path="/var/log/$app/gitea.log" --line_match="Starting new Web server: tcp:127.0.0.1:"

#=================================================
# FINISH MIGRATION PROCESS
#=================================================

if [[ $migration_process -eq 1 ]]; then
    echo "Gogs has been successfully migrated to Gitea! \
A last scheduled operation will run in a couple of minutes to finish the \
migration in YunoHost side. Do not proceed any application operation while \
you don't see Gogs as installed." >&2

    # Execute a post migration script after the end of this upgrade.
    # Mainly for some cleaning
    script_post_migration=gogs_post_migration.sh
    ynh_replace_string --match_string __OLD_APP__ --replace_string "$old_app" --target_file ../conf/$script_post_migration
    ynh_replace_string --match_string __NEW_APP__ --replace_string "$app" --target_file ../conf/$script_post_migration
    cp ../conf/$script_post_migration /tmp
    chmod +x /tmp/$script_post_migration
    (cd /tmp; echo "/tmp/$script_post_migration > /tmp/$script_post_migration.log 2>&1" | at now + 2 minutes)
fi

#=================================================
# UPGRADE FAIL2BAN
#=================================================
ynh_script_progression --message="Reconfiguring Fail2Ban..." --weight=1

ynh_add_fail2ban_config --logpath "/var/log/$app/gitea.log" --failregex ".*Failed authentication attempt for .* from <HOST>" --max_retry 5

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..." --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
